const { Client, LocalAuth } = require('whatsapp-web.js');
const fs = require('fs');
const qrcode = require('qrcode-terminal');
const path = require('path');

let counter = 0;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
function transliterate(text) {
    const rus = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è';
    const eng = 'abvgdeejzijklmnoprstufhzcss_y_eua';
    
    return text.toLowerCase().split('').map(char => {
        const index = rus.indexOf(char);
        return index >= 0 ? eng[index] : char;
    }).join('');
}

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —á–∞—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
const now = new Date();

const year = now.getFullYear();
const month = String(now.getMonth() + 1).padStart(2, '0');
const day = String(now.getDate()).padStart(2, '0');
const hours = String(now.getHours()).padStart(2, '0');
const minutes = String(now.getMinutes()).padStart(2, '0');

// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
const formattedDateTime = `${year}-${month}-${day}_${hours}-${minutes}`;


// –û—á–∏—Å—Ç–∏–º —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
const baseName = 'chats';
const fileName = `${baseName}_${formattedDateTime}`;

const chatsDir = fileName;
if (!fs.existsSync(chatsDir)) {
    fs.mkdirSync(chatsDir);
}

const client = new Client({
    authStrategy: new LocalAuth(),
    puppeteer: {
        headless: true,
        args: ['--no-sandbox']
    }
});

client.on('qr', qr => {
    console.log('üîê –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥:');
    qrcode.generate(qr, { small: true });
});

client.on('ready', async () => {
    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤.');

    const files = fs.readdirSync('.')
    .filter(f => f.startsWith('contacts_') && f.endsWith('.txt'))
    .sort()
    .reverse();
    console.log('–°–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª:', files[0]);
    
    const contactFile = files[0];
    const lines = fs.readFileSync(contactFile, 'utf8')
        .split('\n')
        .filter(Boolean);

    for (const line of lines) {
        const number = line.split(',')[1].trim();
        const chatId = `${number}@c.us`;

        counter++;

        try {
            const chat = await client.getChatById(chatId);
            const messages = await chat.fetchMessages({ limit: 40 }); // 40 —Å–æ–æ–±—â–µ–Ω–∏–π

            console.log(`üí¨ –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${number}...`);
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
            const contact = await chat.getContact();
            const contactName = contact.pushname || contact.name || '–ë–µ–∑_imeni';
            
            // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –Ω–æ–º–µ—Ä–æ–º –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
            const safeFileName = `${counter}_${number}_ ${contactName}`;
            const chatFileName = path.join(chatsDir, `${safeFileName}.txt`);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            let chatContent = `–ù–æ–º–µ—Ä: ${number}\n`;
            chatContent += `–ò–º—è: ${contactName}\n`;
            chatContent += '='.repeat(50) + '\n\n';

            // –ò–∑–º–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π - –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É
            for (const msg of messages) {
                const sender = msg.fromMe ? '–í—ã' : '–ö–æ–Ω—Ç–∞–∫—Ç';
                const timestamp = new Date(msg.timestamp * 1000).toLocaleString();
                chatContent += `[${timestamp}] ${sender}: ${msg.body}\n`;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç –≤ —Ñ–∞–π–ª
            fs.writeFileSync(chatFileName, chatContent, 'utf8');
            console.log(`‚úÖ –ß–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${chatFileName}`);

        } catch (err) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞ ${number}: ${err.message}`);
        }
    }

    console.log('\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    console.log(`üìÅ –í—Å–µ —á–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${chatsDir}`);
    process.exit(0);
});

client.initialize();
